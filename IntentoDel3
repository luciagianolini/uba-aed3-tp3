#include <iostream>
#include <vector>
#include <tuple>
#include <queue>

using namespace std;

int N;
vector<vector<int>> tablero;
vector<vector<int>> subfilas;
vector<vector<int>> subcolumnas;
vector<tuple<int, int, int>> aristas;

/*int n;
int INF = 100000000;
vector<vector<int>> capacity;
vector<vector<int>> adj;

int bfs(int s, int t, vector<int>& parent) {
    fill(parent.begin(), parent.end(), -1);
    parent[s] = -2;
    queue<pair<int, int>> q;
    q.push({s, INF});

    while (!q.empty()) {
        int cur = q.front().first;
        int flow = q.front().second;
        q.pop();

        for (int next : adj[cur]) {
            if (parent[next] == -1 && capacity[cur][next]) {
                parent[next] = cur;
                int new_flow = min(flow, capacity[cur][next]);
                if (next == t)
                    return new_flow;
                q.push({next, new_flow});
            }
        }
    }

    return 0;
}

int maxflow(int s, int t) {
    int flow = 0;
    vector<int> parent(n);
    int new_flow;

    while (new_flow = bfs(s, t, parent)) {
        flow += new_flow;
        int cur = t;
        while (cur != s) {
            int prev = parent[cur];
            capacity[prev][cur] -= new_flow;
            capacity[cur][prev] += new_flow;
            cur = prev;
        }
    }

    return flow;
}
*/

int calcular_subfilas(){
    int numero_subfila = 1;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; ++j) {
            if (tablero[i][j]==1){
                subfilas[i][j]=0;
                if (j!=0 && tablero[i][j-1]!=1){
                    numero_subfila++;
                }
            } else {
                subfilas[i][j]=numero_subfila;
            }
        }
        numero_subfila++;
    }
    return numero_subfila;
}

int calcular_subcolumnas(){
    int numero_subcolumna = 1;
    for (int j = 0; j < N; j++) {
        for (int i = 0; i < N; ++i) {
            if (tablero[i][j]==1){
                subcolumnas[i][j]=0;
                if (i!=0 && tablero[i-1][j]!=1 ){
                    numero_subcolumna++;
                }
            } else {
                subcolumnas[i][j]=numero_subcolumna;
            }
        }
        numero_subcolumna++;
    }
    return numero_subcolumna;
}

void calcular_aristas(){
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; ++j) {
            int subfila = subfilas[i][j];
            int subcolumna = subcolumnas[i][j];
            if (subfila !=0 && subcolumna !=0 ){
                tuple<int, int, int> arista = {subfila, subcolumna, 1};
                aristas.push_back(arista);
             }
        }
    }
}

int main() {
    int tests;
    cin >> tests;

    while (tests > 0) {
        // Leer entrada
        cin >> N;

        // Inicializar estructuras
        tablero = vector<vector<int>>(N, vector<int>(N));
        subfilas = vector<vector<int>>(N, vector<int>(N));
        subcolumnas = vector<vector<int>>(N, vector<int>(N));
        aristas = vector<tuple<int, int, int>>();
        /*adj = vector<vector<int>>(N + 2, vector<int>());
        capacity = vector<vector<int>>(N + 2, vector<int>(N + 2, 0));*/

        // Inicializar estructuras para

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; ++j) {
                int x;
                cin >> x;
                tablero[i][j]=x;
                cout << x;
            }
            cout << endl;
        }

        calcular_subfilas();
        calcular_subcolumnas();
        calcular_aristas();

        cout <<"tablero:"<< endl;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; ++j) {
                cout << tablero[i][j];
            }
            cout << endl;
        }

        cout <<"subfilas:"<< endl;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; ++j) {
                cout << subfilas[i][j];
            }
            cout << endl;
        }

        cout <<"subcolumnas:"<< endl;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; ++j) {
                cout << subcolumnas[i][j];
            }
            cout << endl;
        }

        cout <<"aristas:"<< endl;

        for (int i = 0; i < aristas.size(); ++i) {
            cout << get<0>(aristas[i]) << get<1>(aristas[i]) << endl;
        }



        tests--;
    }
}
